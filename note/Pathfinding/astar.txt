Important de pr√©ciser que

from heapq import heappush, heappop

def astar(start, goal, graph):
    frontier = [(0, start)]
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    while frontier:
        current = heappop(frontier)[1]

        if current == goal:
            break

        for next in graph.neighbors(current):
            new_cost = cost_so_far[current] + graph.cost(current, next)
            if next not in cost_so_far or new_cost < cost_so_far[next]:
                cost_so_far[next] = new_cost
                priority = new_cost + heuristic(goal, next)
                heappush(frontier, (priority, next))
                came_from[next] = current

    return came_from, cost_so_far

def heuristic(a, b):
    # Ce que tu veux
    return abs(a[0] - b[0]) + abs(a[1] - b[1])





def astar_recursive(start, goal, graph, frontier, came_from, cost_so_far):
    if not frontier:
        return came_from, cost_so_far

    current = heappop(frontier)[1]

    if current == goal:
        return came_from, cost_so_far

    for next in graph.neighbors(current):
        new_cost = cost_so_far[current] + graph.cost(current, next)
        if next not in cost_so_far or new_cost < cost_so_far[next]:
            cost_so_far[next] = new_cost
            priority = new_cost + heuristic(goal, next)
            heappush(frontier, (priority, next))
            came_from[next] = current

    return astar_recursive(start, goal, graph, frontier, came_from, cost_so_far)

def astar(start, goal, graph):
    frontier = [(0, start)]
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    return astar_recursive(start, goal, graph, frontier, came_from, cost_so_far)

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])
